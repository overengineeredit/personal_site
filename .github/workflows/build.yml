name: Build, Test, and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Create env file
      run: |
        touch .env
        echo "PORT=3000" >> .env
        echo "SITE_NAME='Personal Site'" >> .env
        echo "FOOTER_NAME='Your Name'" >> .env
        echo "NODE_ENV=test" >> .env
        echo "GTM_ID=${{ secrets.GTM_ID }}" >> .env
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      env:
        CI: true
        
    - name: Check build
      run: npm run build

    - name: Start server for testing
      run: |
        npm start &
        sleep 5  # Wait for server to start
      env:
        GTM_ID: GTM-TEST123

    - name: Test page accessibility
      run: |
        # Test main pages return 200
        for page in "/" "/resume" "/blog"; do
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000$page")
          if [ "$STATUS" != "200" ]; then
            echo "Error: Page $page returned status $STATUS"
            exit 1
          fi
        done
        
        # Test 404 handling
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000/nonexistent")
        if [ "$STATUS" != "404" ]; then
          echo "Error: 404 page not working correctly"
          exit 1
        fi

    - name: Validate GTM implementation
      run: |
        # Check GTM head code
        if ! grep -q "googletagmanager.com/gtm.js" views/partials/google-tag-manager-head.mustache; then
          echo "Error: GTM head code not found"
          exit 1
        fi
        
        # Check GTM body code
        if ! grep -q "googletagmanager.com/ns.html" views/partials/google-tag-manager-body.mustache; then
          echo "Error: GTM body code not found"
          exit 1
        fi

    - name: Validate meta tags and SEO
      run: |
        RESPONSE=$(curl -s "http://localhost:3000")
        
        # Check required meta tags
        for TAG in "viewport" "description" "og:type" "og:title" "og:description" "twitter:card"; do
          if ! echo "$RESPONSE" | grep -q "<meta.*$TAG"; then
            echo "Error: Missing meta tag: $TAG"
            exit 1
          fi
        done

    - name: Validate content structure
      run: |
        # Check required template files
        for FILE in "views/index.mustache" "views/resume.mustache" "views/blog.mustache" "views/error.mustache" "views/404.mustache"; do
          if [ ! -f "$FILE" ]; then
            echo "Error: Missing template file: $FILE"
            exit 1
          fi
        done
        
        # Check required partial files
        for FILE in "views/partials/google-tag-manager-head.mustache" "views/partials/google-tag-manager-body.mustache" "views/partials/header.mustache" "views/partials/footer.mustache"; do
          if [ ! -f "$FILE" ]; then
            echo "Error: Missing partial file: $FILE"
            exit 1
          fi
        done
        
        # Check required data files
        for FILE in "public/data/about.json" "public/data/resume.json"; do
          if [ ! -f "$FILE" ]; then
            echo "Error: Missing data file: $FILE"
            exit 1
          fi
        done

    - name: Validate about content
      run: |
        # Check about.json structure
        ABOUT_CONTENT=$(cat public/data/about.json)
        if ! echo "$ABOUT_CONTENT" | jq -e '.about_me.background and .about_me.interests' > /dev/null; then
          echo "Error: about.json missing required fields"
          exit 1
        fi
        
        # Check about content rendering
        HOMEPAGE=$(curl -s "http://localhost:3000")
        if ! echo "$HOMEPAGE" | grep -q "engineering leader passionate about building"; then
          echo "Error: About content not rendering correctly"
          exit 1
        fi

    - name: Validate navigation structure
      run: |
        # Check navigation links in header
        HEADER=$(cat views/partials/header.mustache)
        for LINK in "href=\"/\"" "href=\"/resume\"" "href=\"/blog\""; do
          if ! echo "$HEADER" | grep -q "$LINK"; then
            echo "Error: Missing navigation link: $LINK"
            exit 1
          fi
        done
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: coverage/
        retention-days: 30

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 